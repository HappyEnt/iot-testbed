* Design and Implementation of GPIO sensing for minimally intrusive tracing of distributed systems.
 oder Design and Implementation of GPIO sensing for minimally intrusive tracing of distributed network applications.

* Todo
** Contiki-NG Operating System: https://github.com/contiki-ng/contiki-ng, https://github.com/contiki-ng/contiki-ng/wiki
   Guck dir mal die Beispiele an, und welche GPIO Interface Möglichkeiten es für die Plattformen Sky und Zoul gibt.
** PulseView: https://sigrok.org/wiki/PulseView
** Sigrok-cli: https://sigrok.org/wiki/Sigrok-cli
** Raspalyzer: http://tuxbabe.eu/raspalyzer.html
** Flocklab-Testbed: https://tec.ee.ethz.ch/research/networked-embedded-systems/flocklab.html, https://pdfs.semanticscholar.org/0384/da82fc4e7b9c55b26eb1be7c3e5875b80dbe.pdf, https://pub.tik.ee.ethz.ch/students/2019-FS/SA-2019-09.pdf, https://pub.tik.ee.ethz.ch/students/2019-FS/SA-2019-10.pdf
** Flocklab GPIO Tracing: https://gitlab.ethz.ch/tec/public/flocklab/flocklab/-/wikis/Man/Tutorials/Tutorial3
* contiki-ng
** disable xserver access control
   guix environment --ad-hoc xhost && xhost +
** Flashing
   sudo make TARGET=zoul BOARD=firefly-reva gpio-test.upload PORT=/dev/ttyUSB0
* orchestration guix vm-image
 build with
   guix system -N vm-image ~/Projects/Bachelorarbeit/orchestration-server.scm
 copy result image out of store and give write permission to running user (chmod +w)

 run image with
  qemu-system-x86_64 -nic user,model=virtio-net-pci -enable-kvm -m 1024 -device virtio-blk,drive=myhd -drive if=none,file=./qemu-image,id=myhd
* Other work
*** A testbed for fine-grained tracing of time sensitive behavior in wireless sensor networks
**** [[file:references/LMDBT2015.pdf][pdf: A testbed for fine-grained tracing of time sensitive behavior in wireless sensor networks]]
**** bibtex
@inproceedings{lim2015testbed,
  title={A testbed for fine-grained tracing of time sensitive behavior in wireless sensor networks},
  author={Lim, Roman and Maag, Balz and Dissler, Benjamin and Beutel, Jan and Thiele, Lothar},
  booktitle={2015 IEEE 40th Local Computer Networks Conference Workshops (LCN Workshops)},
  pages={619--626},
  year={2015},
  organization={IEEE}
}
*** Minerva: Distributed tracing and debugging in wireless sensor networks
**** bibtex
@inproceedings{sommer2013minerva,
  title={Minerva: Distributed tracing and debugging in wireless sensor networks},
  author={Sommer, Philipp and Kusy, Branislav},
  booktitle={Proceedings of the 11th ACM Conference on Embedded Networked Sensor Systems},
  pages={1--14},
  year={2013}
}
*** General Purpose Input/Output (GPIO)
**** bibtex
@incollection{wootton2016general,
  title={General Purpose Input/Output (GPIO)},
  author={Wootton, Cliff},
  booktitle={Samsung ARTIK Reference},
  pages={235--288},
  year={2016},
  publisher={Springer}
}
*** HATBED: a distributed hardware assisted testbed for non-invasive profiling of IoT devices
**** bibtex
@inproceedings{yi2019hatbed,
  title={HATBED: a distributed hardware assisted testbed for non-invasive profiling of IoT devices},
  author={Yi, Li and Ma, Junyan and Zhang, Te},
  booktitle={Proceedings of the 2nd Workshop on Benchmarking Cyber-Physical Systems and Internet of Things},
  pages={13--17},
  year={2019}
}
* FPGA
** [[https://www.digikey.de/product-detail/de/lattice-semiconductor-corporation/ICE40HX1K-STICK-EVN/220-2656-ND/4289604][IceStick]]
* Time Synchronization
** [[https://www.ohwr.org/project/white-rabbit/wikis/home][white rabbit cern]]
** [[http://www.rocketmanrc.com/openpps-lessonslearned.html][OpenPPS]]
** [[https://en.wikipedia.org/wiki/GPS_disciplined_oscillator][GPS disciplined Oscillator]]
** [[https://www.u-blox.com/sites/default/files/products/documents/Timing_AppNote_(GPS.G6-X-11007).pdf][u-blox gps timing considerations]]
** [[http://www.ntp.org/ntpfaq/NTP-s-sw-clocks-quality.htm][NTP Clock Quality]]
** [[http://doc.ntp.org/4.1.2/refclock.htm][Reference-Clock drivers]]
   Type22 - pps reference clock
   type20 - nmea gps
** [[http://www.ntp.org/ntpfaq/NTP-s-algo-kernel.htm][PPS disclipined kernel clock]]
*  MSP430
** Functional Diagram - USART0, USART1
  werden eingaben über den Bus gebuffert? Stallt der CPU bis die Übertragung fertig ist?

  Der Schritt MCU - FT232 - USB - HOST ist zwar ungünstig um genaue, zeitgestempelte Traces zu sammeln, sollte aber die Ausführung nicht
  mehr Bremsen als wenn man den weg MCU - HOST via UART direkt nimmt, da der MCU im Schritt MCU - FT232 zuvor in einen I/O Buffer schreibt.

  Schreiben in den I/O Buffer und Kommunikation mit dem Radio Medium läuft über das selbe Serielle Interface (UART1)
** https://www.argenox.com/library/msp430/general-purpose-input-output-gpio-chapter-5/
